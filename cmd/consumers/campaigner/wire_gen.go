// Code generated by Wire. DO NOT EDIT.

//go:generate go run github.com/google/wire/cmd/wire
//go:build !wireinject
// +build !wireinject

package main

import (
	"context"
	"github.com/mailbadger/app/config"
	"github.com/mailbadger/app/services/campaigns"
	"github.com/mailbadger/app/services/templates"
	"github.com/mailbadger/app/sqs"
	"github.com/mailbadger/app/storage"
	"github.com/mailbadger/app/storage/s3"
)

// Injectors from app.go:

func initApp(ctx context.Context, conf config.Config) (app, error) {
	db := storage.New(conf)
	storageStorage := storage.From(db)
	awsConfig, err := initAwsConfig(ctx)
	if err != nil {
		return app{}, err
	}
	client := sqs.NewClient(awsConfig)
	service := campaigns.From(storageStorage, client, conf)
	s3S3, err := s3.NewClient()
	if err != nil {
		return app{}, err
	}
	templatesService := templates.From(storageStorage, s3S3, conf)
	campaignerQueueURL, err := sqs.GetCampaignerQueueURL(ctx, client)
	if err != nil {
		return app{}, err
	}
	sendEmailQueueURL, err := sqs.GetSendEmailQueueURL(ctx, client)
	if err != nil {
		return app{}, err
	}
	mainHandler := newHandler(storageStorage, service, templatesService, client, campaignerQueueURL, sendEmailQueueURL)
	queueURL := newQueueURL(campaignerQueueURL)
	consumer := sqs.NewConsumerFrom(conf, queueURL, client)
	mainApp := newApp(mainHandler, consumer)
	return mainApp, nil
}

// app.go:

type app struct {
	handler  *handler
	consumer sqs.Consumer
}

func newApp(h *handler, c sqs.Consumer) app {
	return app{
		handler:  h,
		consumer: c,
	}
}
